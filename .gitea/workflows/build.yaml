name: Build Microservice

on: [push, pull_request] # Käynnistyy, kun koodia pushataan tai pull request avataan/päivitetään

jobs:
  build:
    runs-on: [linux/amd64, host] # Varmista, että Runnerillasi on nämä labelit

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Kloonaa peilatun GitHub-repon koodin

      - name: Set up Node.js (if your microservice uses it)
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Tai mikä tahansa tarvitsemasi Node.js-versio

      - name: Install dependencies
        run: npm install

      - name: Build project (if needed)
        run: npm run build
        # Tai jos kyseessä on vain SVG-tiedostojen tarjoaminen, tämä askel voi olla yksinkertaisempi tai tarpeeton.

      - name: Deploy via SSH and Rsync
        env:
          # Gitean Secretsiin tallennettu yksityinen SSH-avain
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          # Kohdekoneen deploy-käyttäjä, jonka loimme
          TARGET_USER: gitea-deploy
          # Kohdekoneen IP-osoite tai hostname
          TARGET_HOST: 192.168.68.118
          # Hakemisto kohdekoneella, johon palvelun tiedostot kopioidaan
          TARGET_PATH: /opt/weather_symbol_service
        run: |
          echo "Deploying to ${TARGET_USER}@${TARGET_HOST}:${TARGET_PATH}"

          # Tallenna yksityisavain väliaikaisesti Runner-koneella
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa_deploy
          chmod 600 ~/.ssh/id_rsa_deploy

          # Lisää kohdekoneen julkinen avain known_hostsiin (hyvä käytäntö turvallisuuden vuoksi)
          # Tämä estää "Host key verification failed" -virheitä
          # Voit saada oikean rivin ajamalla 'ssh-keyscan 192.168.68.118' Runner-koneella ja kopioimalla sen.
          # Jos haluat aloittaa yksinkertaisesti, voit ohittaa StrictHostKeyCheckingin:
          # -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null

          # UUSI LISÄYS: Varmista, että deploy-käyttäjä omistaa hakemiston ENNEN rsync --delete -operaatiota
          echo "Executing pre-deploy chown for rsync deletion."
          ssh -i ~/.ssh/id_rsa_deploy -o StrictHostKeyChecking=no ${TARGET_USER}@${TARGET_HOST} "sudo /usr/local/bin/pre_deploy_chown.sh"

          # Synkronoi tiedostot Rsyncilla
          # Nyt voimme käyttää -avz-lippua, koska gitea-deploy omistaa kohteen.
          echo "Copy files to target."
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa_deploy -o StrictHostKeyChecking=no" ./dist/ ${TARGET_USER}@${TARGET_HOST}:${TARGET_PATH}/

          echo "Executing deploy script on target."
          ssh -i ~/.ssh/id_rsa_deploy -o StrictHostKeyChecking=no ${TARGET_USER}@${TARGET_HOST} "sudo /usr/local/bin/deploy_weather_service.sh"

          echo "Deployment complete."

          # Poista yksityinen avain turvallisuussyistä
          rm ~/.ssh/id_rsa_deploy
      - name: Verify Service Health
        env:
          SERVICE_URL: http://192.168.68.118:4000 # Varmista, että URL ja portti ovat oikein
        run: |
          echo "Waiting for service to become available at ${SERVICE_URL}..."
          # Yritä kutsua URLia useita kertoja pienellä viiveellä.
          # Palvelu saattaa kestää hetken käynnistyä uudelleen.
          for i in $(seq 1 10); do # Yritä 10 kertaa (10 * 5s = 50s max odotus)
            response=$(curl -s -o /dev/null -w "%{http_code}" ${SERVICE_URL})
            if [ "$response" = "200" ]; then
              echo "Service responded with HTTP 200. Checking content..."
              # Tarkista vastauksen sisältö. Etsitään merkkijonoa "appName"
              # Käytetään grep -q, joka palauttaa 0 jos löytää, ei tulosta mitään.
              if curl -s ${SERVICE_URL} | grep -q '"appName":"Weather Symbol Microservice"'; then
                echo "Service health check PASSED!"
                exit 0 # Kaikki kunnossa, poistu onnistuneesti
              else
                echo "Service responded with HTTP 200, but content check FAILED. Retrying..."
              fi
            else
              echo "Service not yet available (HTTP ${response}). Retrying in 5 seconds..."
            fi
            sleep 5 # Odota 5 sekuntia ennen seuraavaa yritystä
          done

          echo "Service health check FAILED: Service did not respond as expected after multiple retries."
          exit 1 # Epäonnistui, poistu virheellä          
